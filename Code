import RPi.GPIO as GPIO 
import time 
import cv2 
# GPIO setup 
GPIO.setmode(GPIO.BCM) 
# GPIO pins for traffic lights 
red_light_1 = 17 # Red light for Lane 1 
yellow_light_1 = 27 # Yellow light for Lane 1 
green_light_1 = 22 # Green light for Lane 1 
red_light_2 = 5 # Red light for Lane 2 
yellow_light_2 = 6 # Yellow light for Lane 2 
green_light_2 = 13 # Green light for Lane 2 
# GPIO pins for IR sensors 
sensor_1 = 23 # IR Sensor for Lane 1 
sensor_2 = 24 # IR Sensor for Lane 2 
# Setup pins 
GPIO.setup([red_light_1, yellow_light_1, green_light_1], GPIO.OUT) GPIO.setup([red_light_2, yellow_light_2, green_light_2], GPIO.OUT) GPIO.setup([sensor_1, sensor_2], GPIO.IN) 
# Camera setup 
camera = cv2.VideoCapture(0) 
background_subtractor = cv2.createBackgroundSubtractorMOG2(history=100, varThreshold=40) 
# Function to set traffic lights for a lane 
def set_traffic_lights(red, yellow, green, red_pin, yellow_pin, green_pin): GPIO.output(red_pin, red) 
GPIO.output(yellow_pin, yellow) 
GPIO.output(green_pin, green) 

# Function for background subtraction-based vehicle detection 
def detect_vehicles_with_background_subtraction(frame): 
# Apply background subtraction 
fg_mask = background_subtractor.apply(frame) 
# Post-process the mask 
_, threshold = cv2.threshold(fg_mask, 200, 255, cv2.THRESH_BINARY) contours, _ = cv2.findContours(threshold, cv2.RETR_TREE, 
cv2.CHAIN_APPROX_SIMPLE) 
for contour in contours: 
if cv2.contourArea(contour) > 1000: # Adjust threshold based on scene return True # Vehicle detected 
return False 
try: 
while True: 
# Read IR sensor states 
lane_1_occupied = GPIO.input(sensor_1) 
lane_2_occupied = GPIO.input(sensor_2) 
# Capture camera frame 
ret, frame = camera.read() 
if not ret: 
print("Error: Camera not available") 
break 
# Perform vehicle detection using the background subtractor 
lane_1_camera_detected = detect_vehicles_with_background_subtraction(frame) lane_2_camera_detected = detect_vehicles_with_background_subtraction(frame) 
# Logic for Lane 1 
if lane_1_occupied or lane_1_camera_detected: 
set_traffic_lights(0, 0, 1, red_light_1, yellow_light_1, green_light_1) set_traffic_lights(1, 0, 0, red_light_2, yellow_light_2, green_light_2) time.sleep(10) 
set_traffic_lights(0, 1, 0, red_light_1, yellow_light_1, green_light_1) time.sleep(3) 

# Logic for Lane 2 
elif lane_2_occupied or lane_2_camera_detected: 
set_traffic_lights(1, 0, 0, red_light_1, yellow_light_1, green_light_1) set_traffic_lights(0, 0, 1, red_light_2, yellow_light_2, green_light_2) time.sleep(10) 
set_traffic_lights(0, 1, 0, red_light_2, yellow_light_2, green_light_2) time.sleep(3) 
# Default state 
else: 
set_traffic_lights(1, 0, 0, red_light_1, yellow_light_1, green_light_1) set_traffic_lights(1, 0, 0, red_light_2, yellow_light_2, green_light_2) 
# Display the camera feed for monitoring 
cv2.imshow("Traffic Camera", frame) 
if cv2.waitKey(1) & 0xFF == ord('q'): 
break 
except KeyboardInterrupt: 
print("Program interrupted.") 
finally: 
GPIO.cleanup() 
camera.release() 
cv2.destroyAllWindows() 
